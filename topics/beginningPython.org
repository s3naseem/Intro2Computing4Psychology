* General Programming Concepts Illustrated with Python
  The general comments apply to more than just python. For some of the particular examples of code python is used as the example language.
** A digression on programming (aka writing code)
*** It is nothing deep: thinking before doing saves you time and improves the result. 
    You are writing a recipe. Do these things to get this result. Just like cooking has a certain vocabulary you need to know to follow or write a recipe, the same is true of programming.

    Just like you have to think what you want to cook before you write a recipe, and you often have to go through several test dishes to perfect your recipe the same is true of programming. 
    - [[https://www.quora.com/What-should-go-in-my-mind-before-I-start-writing-code/answer/Marcelo-Calder%C3%B3n][Think what you want to do first]].
      [[https://medium.com/edge-coders/the-mistakes-i-made-as-a-beginner-programmer-ac8b3e54c312][Another blog in support of this idea]].
    - [[https://www.quora.com/Should-you-always-write-pseudocode-before-real-code/answer/Bruce-Richardson-4][Sketch out how the different pieces of your plan need to go together]].
    - *Only then* decide on which programming language and tools best suit this purpose. Sometimes this will be biased by what you know, but often it can be driven by what *libraries* and *packages* have already been written by other that will do some or most of what you want to do.
    - Select the tool for writing your code. Selection of an *ide* (integrated development environment) is a large [[*IDEs][topic]] to itself. It is more a matter of style,taste and your community than technical advantages; that is why there are so many of them. Here you will be using Emacs, but after this course most of you will probably settle on a different IDE. Shop around before you settle down.
    - *Only now* should you start typing your code.
      If you know what you want to happen, and how you want it to happen, then finding the right keyword in R or Python or most other languages is a comparatively easy task.
** Compilation versus Interpretation
   Are you simultaneously translating a conversation or translating a book?
*** Interpreters ...
    are tools that take your code one line at a time and translate that into the language your computer speaks. It is like a simultaneous translation of a language. When you start a python or R interpreter you are asking that each line you type be immediately translated and executed.
    The advantages of this are that it can lead to quicker feedback, and encourage exploration. The disadvantage is that it is usually slower than compiled code, and it is not the sort of thing you can share with a non-technical user.
*** Compilers ...
    are tools for taking an entire text of code (like a book) and translating that into machine code. Thus, compilers can exploit their knowledge of the whole document to make things run more efficiently or robustly. The advantage is you can share the result, your program or application, with a non-technical user and they can input their data or use the program via your coded interface. The downside is that development can be slower and more complex.
*** Which is better?
    Neither. Different tasks require different tools. An R interpreter is a great way to conduct data exploration. A compiled c program might be the better way to tackle a large scale complex data analysis routine. 
** Coding styles
   Makes your code easier to read by people using the same language.
     
   Try to follow good programming style, and if available, language guides.

   [[https://www.python.org/dev/peps/pep-0008/][Python Style Guide]]
** Org-babel
   Org-babel is a way to include code in an org document and have it properly execute. 
   There is, of course, an Emacs manual : ~C-h i~ Search for org mode and in the org mode manual look for the "[[info:org#Library of Babel][Library of Babel]]".  A pretty extensive tutorial can be found [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][here]]. A more recent workshop gives examples [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][here]].

   We will want some basic text in our =init.el= file to make things work.
   #+begin_src elisp :eval never
   (setq org-confirm-babel-evaluate nil)
   (setq org-babel-python-command "python3")
     (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t) 
     (R . t)
     (python . t)))
   #+end_src

   Then you can create a source code block with
   #+Begin_src <langname> :exports code
   <code here ... code here>
   #+End_src 

   There are many optional arguments that can appear on the line with "Begin" that will affect how the output appears and how it gets updated. Many of these *header* arguments are different for different languages and are presented [[https://org-babel.readthedocs.io/en/latest/header-args/][here]]. 


   Here is a functioning babel block for R
   #+Begin_src R :exports both
   a = 2
   b = c(1,2)
   a + b
   #+End_src

   #+RESULTS:
   | 3 |
   | 4 |

   And another for python

   #+Begin_src python :results output :exports both
   myname = "britt"
   mylistname = list(myname)
   for i,j in enumerate(mylistname):
       print((i,j))
   #+End_src

   #+RESULTS:


** Some programming vocabulary
*** Data often come in *Types*
    Some languages dynamically type where other statically type. Python tries to figure out whether you meant "1" to be a character or a numeral and may interpret it as either depending on context. That can make it easier for you to just get working and not worry about all the details. In a statically typed language you may have to tell your compiler or interpreter exactly how you want it to interpret a particular "1". This can make writing your code slower and more wordy, but gives you a lower risk of errors later on.
**** Some common [[https://docs.python.org/3/library/stdtypes.html][types]]
     - Integers :: 1, 2, ...
     - Doubles/Floats :: 10.3, pi; basically numbers that have decimal points. Thus, 1.000000 is not the same as the integer 1. 
     - Booleans :: True , False 
                   NB: some languages, e.g. R, use TRUE. 
     - Lists and Tuples ::
       - Tuples :: (1,2), ('a',10.34,False) Have a fixed number of slots, can be different types.
                   Define with parentheses usually, but check your programming languages specifications.
       - Lists  :: [1,2,3,4] Have a potentially infinite number of slots, but must all be same type.
                   Define with square brackets in python.
     - Dictionaries :: {'firstName' : 'Britt', 'lastName' : 'Anderson'}; Also referred to as key:value pairs. In python the curly braces are used. 
     - Comments :: Not really code, but allows you to put stuff in your programs for other users and yourself to read. In python the lines start with a hash "#"
*** Constants and Variables
    A conceptual difference more than a implementation difference in python. Do you think the value will always be the same, like hours in the day, then it is a "constant". Do you think that the value will mutate over the course your program runs, like the time on a clock, then it is a variable. Both may be defined in python with an equal sign. Some people use the typography to distinguish the two, but note that some programming languages are case sensitive meaning ~ONE~ is different from ~one~. 
    #+begin_src python :exports both :results function replace :session *P363*
      NUMDAYPERYEAR = 365

      x = NUMDAYPERYEAR

      daysThisYear = x + 1
    #+end_src

    #+RESULTS:
    : 366
    
    Here we treat the number of days in a regular year as a constant while allowing ~daysThisYear~ to be a variable which can change with a leap year. 
*** Assignment and Equality
    ~=~ is different from ~==~

 #+begin_src python :results output :exports both
 a = 2
 print(a == 3)
 #+end_src

 #+RESULTS:
 : False
*** Loops
    We saw a quick demonstration of this above. The intuition remains that of a recipe: "stir egg whites until peaked" or "simmer for 30 minutes".
**** For Loop
     Python refers to things called "iterables." To iterate is another way of saying something you can keep doing the same thing over and over to. Imagine a bowl of ice cream. It is "eatable". You take one spoon, and keep taking spoonfuls until the bowl is empty. 
***** Indexing
      You can get the location of an element in a list by referring to its /index/. Think of the row or column number in a spread sheet program, but indexes can be more powerful, and can be nested easily. In many programming languages, but sadly not all, indexes start at 0. Different programming languages will have slightly different syntax. 
      #+Name: Indexing
      #+begin_src python :session *P363* :exports both :results output
	nameDict = {'firstName' : 'Britt', 'lastName' : 'Anderson'}
	mylist = list(range(1,10))

	print(nameDict['firstName'])

	print(mylist)

	print(mylist[0])

	print(mylist[-1])

	print(mylist[0:4])
      #+end_src

      #+RESULTS: Indexing
      : Britt
      : [1, 2, 3, 4, 5, 6, 7, 8, 9]
      : 1
      : 9
      : [1, 2, 3, 4]

      The use of the =-1= as an index is a python trick for getting the last element in a list. Think of the list as a circle. If you count backwards from a list you will get to the beginning eventually (index 0) if you went back one more step (-1) you would circle back to the end of the list. Test what happens when you try -2. Does it keep going? A lot of learning how to program is exploring. 
     
      #+Name: For Loop
      #+begin_src python :session *P363* :exports both :results output
	for ml in mylist:
            print(ml)


	for i,ml in enumerate(mylist):
            print("The {0}th element was {1}".format(i,ml))
      #+end_src

      #+RESULTS: For Loop
      #+begin_example
      1
      2
      3
      4
      5
      6
      7
      8
      9
      The 0th element was 1
      The 1th element was 2
      The 2th element was 3
      The 3th element was 4
      The 4th element was 5
      The 5th element was 6
      The 6th element was 7
      The 7th element was 8
      The 8th element was 9
      #+end_example
**** While Loop
     These are like for loops in that they do stuff over and over, but unlike for loops they do things indefinitely, until that is, you tell them to stop. How do you do that? You use a predicate that they test for each time through the loop. That means you need to specify a /predicate./
**** Conditionals
     This is where you test whether something is or is not ~True~. Note that Python, but not all computer languages, treats 0 as the same as False, and all non-zero values as True. 

     #+begin_src python :exports code  :session *P363* :results output
       if (2 == 3):
           print("Wha.....?\n\n")
       elif (3 == 2):
           print("Now that is odd")
       else:
           print("2 does not equal 3.")
     #+end_src

     #+RESULTS:
     : 2 does not equal 3.

     NB: note the use of colon (:) at the end of the =for= and =while= lines. 

     #+begin_src python :exports both :session *P363* :results output
       i = 0
       while (i<=10):
           print("brittAnderson"[i])
           i = i+1
         #+end_src

         #+RESULTS:
         #+begin_example
         b
         r
         i
         t
         t
         A
         n
         d
         e
         r
         s
         #+end_example

*** Functions
    We encountered an earlier example of this in the [[file:rStudioWinMacFirstSteps.org::*Functions][Rmd lesson]]. Think
    of a function as a machine that grinds meat. You pour in a cow.
    You get out hamburger. Input -> Output. Note that arguments are
    "local". They are not referring to variables outside the function,
    in the program globally, but only make sense locally in the
    function. You drop values into those slots, and then you can use
    those names in your function, because until you use it, your
    function doesn't know what it will be getting.
 #+begin_src python :exports code  :session *P363*
 def myadd(x,y):
    return(x+y)
 #+end_src

 #+RESULTS:

 #+begin_src python :exports both :results output :session *P363*
 myadd(2,3)
 #+end_src

 #+RESULTS:
 : 5

*** Beginning Python Assessment 1
    [[file:~/gitRepos/introComp4Psych/assessments/forLoopPythonAssessment.org][For Loop Python Assessment]]
*** Libraries
    Lots of people use python. Python has been around a long time. Almost anything you might think to do at this point has been done by someone else. Look for a library and use someone else's code if you can. Use your time and effort to perfect your particular project, not to reinvent the wheel. An advantage of popular libraries is that they are likely to have withstood the tests of many users and will be more robust and correct than something you are likely to write as a first effort. 
**** What are some popular libraries?  
     [[https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/][Here]] are 20 recommended ones.
     
     Of particular note for us are:
     1. Numpy
     2. Scipy
     3. Matplotlib
     4. Pillow
     5. Sympy

*** Programs
    Programs are simply collections of all of the above. Complex programs may have smaller programs as components or span many files and subsidiary libraries.
*** Debugging and Basic Working Methods
    Debugging refers to the general process of finding the mistakes in your code and fixing them. Bugs can be mistakes that keep your code from running or they can be mistakes in your logic. Then the code runs, but it doesn't do what you want. Those are the worst, and the hardest to fix. 
   
    Many programming environments will provide sophisticated tools for debugging, but to get going a fairly simple technique is to embed many ~print~ statements into your code so that you can see what happening and whether your variables are actually changing like you think they should. When all is working well go back into your code and _comment out_ or delete the print statements. 
*** IDEs
    What does IDE stand for: Integrated development environment.

    Two popular python IDEs are:
    1. Spyder
    2. pyCharm
**** [[https://realpython.com/emacs-the-best-python-editor/][Emacs as a python IDE]]
     This is what you need to use for this course: emacs.
     1. Open up a blank file with a name that ends in .py
     2. Type in some lines (e.g. a = 2, b = 3, print(a+b))
     3. Type C-c C-c on the first line.
     4. Read the error message
     5. Fix it.
     6. Keep C-c C-c'ing on each line and look at what is happening in your console.
     7. When your cursor is on a python word, like ~print~, look in the mode line.
     8. Try M-x linum-mode
     9. Looking for something more full featured? Try =elpy=. Instructions to install found [[https://elpy.readthedocs.io/en/latest/introduction.html#installation][here]]. 
** Pip to Install Libraries and Virtual Environments
   In general, try to use one packaging system for your installation. If you chose to get your packages via Ubuntu repositories (i.e. =apt=) then try to get as many from there as you can. 
   Otherwise the =pip= tool is convenient, though it will likely be superseded in the near future. 
*** Pip
    pip is the python install package program. There have been many ways to install python packages over the years and you will find a lot of tracks on the internet. There is a new system coming called wheel, but for now stick with pip (ubuntu also has many of these packages, but I find it better to try and not to mix package managers. Use your choice; mine is pip.
*** Virtual Environments
    When you install software to your system there is always a chance that you will install packages that conflict with each other. One way to reduce the risk of this problem is to install your programs and packages into small isolated sandboxes. The idea is that each sandbox exists independent of each of the others and only sees the packages that are installed locally to it. [[https://docs.python.org/3/tutorial/venv.html][Virtual environments]] are a way to achieve this sandboxing, and python has built in tools to support this idea. The use of =venv= and similar ideas is beyond the scope of what we have time for here, but it is not overly complicated to set up and use. You should read further on this topic if you plan to use python more extensively in the future. Another related approach is to use [[https://www.geeksforgeeks.org/set-up-virtual-environment-for-python-using-anaconda/][conda/anaconda]].
*** Beginning Python Assessment 2
    [[file:~/gitRepos/introComp4Psych/assessments/hangmanPython.org]]
